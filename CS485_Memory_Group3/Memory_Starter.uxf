<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <help_text>// Uncomment the following line to change the fontsize and font:
// fontsize=14
fontfamily=Monospaced //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>320</x>
      <y>20</y>
      <w>470</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>TextUI
--
-struct compare
-mWidgets : map&lt;pair&lt;int,int&gt;,ITextUIWidget*&gt;
-mrcOut : ostream&amp;
-mrcIn : istream&amp;
-mEventMap : map&lt;string, function&lt;void(string)&gt;
--
+TextUI(ostream&amp;, istream&amp;)
+~TextUI()

+addWidget(int, int, ITextUIWidget*) : void
+drawScreen() : void
+clearScreen() : void
+displayEventMentu() : void
+UIEventLoop() : void
registerEvent(string, function&lt;void(string)&gt;) : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>840</x>
      <y>0</y>
      <w>250</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>ITextUIWidget
--
--
/+~ITextUIWidget()/

/+setData(string) = 0 : void/
/+getData() = 0 : string/

/+setLabel(string) = 0 : void/
/+getLabel() = 0 : string/

/+draw(ostream&amp;) = 0 : void/
/+getLength() = 0 : int/


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>820</x>
      <y>290</y>
      <w>280</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>TextUITextWidget
--
-mData : string
-mLable : string
--
TextUITextWidget(string, string)
/+~TextUITextWidget()/

/+setData(string) : void/
/+getData() : string/

/+setLabel(string) : void/
/+getLabel() : string/

/+draw(ostream&amp;) : void/
/+getLength() : int/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>900</x>
      <y>230</y>
      <w>30</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>780</x>
      <y>30</y>
      <w>80</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;60.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>510</x>
      <y>770</y>
      <w>320</w>
      <h>430</h>
    </coordinates>
    <panel_attributes>Board
--
+BOARD_SIZE : int
-macCards[][] : Card
-maFixed[][] : bool
-USED_CARD : int &lt;&lt;static&gt;&gt;
--
+Board(int, bool)

+flip(int ,int ) : bool
+putFaceDown(int,int) : void

+match(int, int, int, int) : bool

+replace(int,int) : void

+isBoardDone() : bool

+getCard(int, int) : std::string
+setFixed(int,int) : void
+legalFlip(int, int) : bool
+reset() : bool

-setUpBoard(int, bool) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>110</x>
      <y>780</y>
      <w>300</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>Card
--
-mFaceValue : int
-mbFaceUp : bool
--
+Card(int)

+getValue() : int
+to_string() : std::string

+flip() : void
+putFaceDown() : void
+isFaceUp() : bool
+operator==(Card&amp;) : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>400</x>
      <y>840</y>
      <w>130</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>820</x>
      <y>730</y>
      <w>160</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>140.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>960</x>
      <y>660</y>
      <w>410</w>
      <h>520</h>
    </coordinates>
    <panel_attributes>Model
--
-mpcBoard : Board
-mcVecPlayers : std::vector&lt;Player&gt;
-mCurrentTurn : int
-NOT_FLIPPED : int &lt;&lt;static&gt;&gt;
-mLastX1 : int
-mLastY1 : int
-mLastX2 : int
-mLastY2 : int 
--
+Model(int)
+~Model()

+isBoardDone() : bool
+isWinner() : bool
+getCurrentPlayerName() : std::string
+getCurrentPlayerScore() : int

+setPlayerName(std::size_t, std::string): void

+flip(int,int) : bool
+legalMove(int,int) : bool

+resetGame() : void
+advanceTurn() : void

+getCard(int, int) : std::string
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>670</x>
      <y>690</y>
      <w>310</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>290.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>430</x>
      <y>460</y>
      <w>290</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>Player
--
-mcName : std::string
-mScore : int
--

+Player()
+Player(std::string)

+setName(std::string) : void
+getName() :std::string

+getScore() : int
+incrementScore() : void
+resetScore() : void
</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
